<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MimeTypeParameter Class</title><meta name="Title" content="MimeTypeParameter" /><meta name="Help.Id" content="T:FolkerKinzel.MimeTypes.MimeTypeParameter" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.MimeTypes" /><meta name="guid" content="6c9b9536-3a7e-2a52-112c-65b45dcc8356" /><meta name="Description" content="Encapsulates the data of an Internet Media Type parameter." /><meta name="tocFile" content="../toc/IDC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.DataUrls</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Mime<wbr />Type<wbr />Parameter Class</h1><div class="summary">
            Encapsulates the data of an Internet Media Type parameter.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="cd50c7a3-02f6-2e09-4e46-144944c88fc1.htm">FolkerKinzel.MimeTypes</a><br /><strong>Assembly:</strong> FolkerKinzel.MimeTypes (in FolkerKinzel.MimeTypes.dll) Version: 1.0.0+6f43c0909df703d55dec9279894b6648c8288f99<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">MimeTypeParameter</span> : <span class="identifier">IComparable</span>&lt;<span class="identifier">MimeTypeParameter</span>&gt;, 
	<span class="identifier">IEquatable</span>&lt;<span class="identifier">MimeTypeParameter</span>&gt;</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">MimeTypeParameter</span>
	<span class="keyword">Implements</span> <span class="identifier">IComparable</span>(<span class="keyword">Of</span> <span class="identifier">MimeTypeParameter</span>), <span class="identifier">IEquatable</span>(<span class="keyword">Of</span> <span class="identifier">MimeTypeParameter</span>)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">MimeTypeParameter</span> <span class="keyword">sealed</span> : <span class="identifier">IComparable</span>&lt;<span class="identifier">MimeTypeParameter</span>^&gt;, 
	<span class="identifier">IEquatable</span>&lt;<span class="identifier">MimeTypeParameter</span>^&gt;</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">MimeTypeParameter</span> = 
    <span class="keyword">class</span>
        <span class="keyword">interface</span> <span class="identifier">IComparable</span>&lt;<span class="identifier">MimeTypeParameter</span>&gt;
        <span class="keyword">interface</span> <span class="identifier">IEquatable</span>&lt;<span class="identifier">MimeTypeParameter</span>&gt;
    <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">MimeTypeParameter</span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.icomparable-1" target="_blank" rel="noopener noreferrer">IComparable</a><span id="LST2FEE8ADF_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink">MimeTypeParameter</span><span id="LST2FEE8ADF_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, <a href="https://learn.microsoft.com/dotnet/api/system.iequatable-1" target="_blank" rel="noopener noreferrer">IEquatable</a><span id="LST2FEE8ADF_2" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink">MimeTypeParameter</span><span id="LST2FEE8ADF_3" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDBCSection"><p>
            Building, serializing, parsing, and editing of  <a href="cf45aa02-2c31-6523-699f-9af592bef575.htm">MimeType</a> instances:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using FolkerKinzel.MimeTypes;

namespace Examples;

public static class BuildAndParseExample
{
    public static void Example()
    {
        const string longParameterValue = """
        This is a very long parameter that will be wrapped according to RFC 2231.
        It also contains a few Non-ASCII-Characters: äöß.
        """;

        MimeType mimeType1 =
            MimeType.Create("application", "x-stuff")
                    .AppendParameter("first-parameter", longParameterValue, "en")
                    .AppendParameter("second-parameter", "Parameter with  \\, = and \".");

        string s = mimeType1.ToString(MimeFormats.LineWrapping);
        Console.WriteLine(s);

        var mimeType2 = MimeType.Parse(s);

        Console.WriteLine();
        Console.WriteLine("Media Type: {0}", mimeType2.MediaType);
        Console.WriteLine("Sub Type:   {0}", mimeType2.SubType);
        Console.WriteLine();
        Console.WriteLine("Is text:         {0}", mimeType2.IsText);
        Console.WriteLine("Is plain text:   {0}", mimeType2.IsTextPlain);
        Console.WriteLine("Is octet stream: {0}", mimeType2.IsOctetStream);

        int parameterCounter = 1;
        foreach (MimeTypeParameter parameter in mimeType2.Parameters)
        {
            Console.WriteLine();
            Console.WriteLine($"Parameter {parameterCounter++}:");
            Console.WriteLine("============");
            Console.WriteLine($"Key:      {parameter.Key}");
            Console.WriteLine($"Language: {parameter.Language}");
            Console.WriteLine("Value:");
            Console.WriteLine(parameter.Value);
            Console.WriteLine();
            Console.WriteLine("Is charset parameter:       {0}", parameter.IsCharSetParameter);
            Console.WriteLine("Is ASCII charset parameter: {0}", parameter.IsAsciiCharSetParameter);
            Console.WriteLine("Is access type parameter:   {0}", parameter.IsAccessTypeParameter);
            Console.WriteLine("Is value case sensitive:    {0}", parameter.IsValueCaseSensitive);
        }

        // The MimeType class allows to modify the parameters:
        mimeType2.RemoveParameter("first-parameter")
                 .AppendParameter("Second-Parameter", "normal");

        Console.WriteLine();
        Console.Write("mimeType2 modified: ");
        Console.WriteLine(mimeType2);
    }
}
/*
Console Output:

application/x-stuff;
first-parameter*0*=utf-8'en'This%20is%20a%20very%20long%20param;
first-parameter*1*=eter%20that%20will%20be%20wrapped%20accordin;
first-parameter*2*=g%20to%20RFC%202231.%0D%0AIt%20also%20contai;
first-parameter*3*=ns%20a%20few%20Non-ASCII-Characters%3A%20%C3;
first-parameter*4*=%A4%C3%B6%C3%9F.;
second-parameter="Parameter with  \\, = and \"."

Media Type: application
Sub Type:   x-stuff

Is text:         False
Is plain text:   False
Is octet stream: False

Parameter 1:
============
Key:      first-parameter
Language: en
Value:
This is a very long parameter that will be wrapped according to RFC 2231.
It also contains a few Non-ASCII-Characters: äöß.

Is charset parameter:       False
Is ASCII charset parameter: False
Is access type parameter:   False
Is value case sensitive:    True

Parameter 2:
============
Key:      second-parameter
Language:
Value:
Parameter with  \, = and ".

Is charset parameter:       False
Is ASCII charset parameter: False
Is access type parameter:   False
Is value case sensitive:    True

mimeType2 modified: application/x-stuff; second-parameter=normal
 */</code></pre></div></div><p>Formatting a <a href="cf45aa02-2c31-6523-699f-9af592bef575.htm">MimeType</a> instance into a standards-compliant <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> 
            using several options:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using FolkerKinzel.MimeTypes;

namespace Examples;

public static class FormattingOptionsExample
{
    public static void Example()
    {
        MimeType mimeType =
            MimeType.Create("application", "x-stuff")
                           .AppendParameter("short", "s")
                           .AppendParameter("key-long",
            "Very very loooong value in order to show the line wrapping");

        Console.WriteLine("MimeFormats.Default:");
        Console.WriteLine(mimeType.ToString());
        Console.WriteLine();

        Console.WriteLine("MimeFormats.IgnoreParameters:");
        Console.WriteLine(mimeType.ToString(MimeFormats.IgnoreParameters));
        Console.WriteLine();

        Console.WriteLine("MimeFormats.AvoidSpace:");
        Console.WriteLine(mimeType.ToString(MimeFormats.AvoidSpace));
        Console.WriteLine();

        Console.WriteLine("MimeFormats.LineWrapping:");
        Console.WriteLine(mimeType.ToString(MimeFormats.LineWrapping));
        Console.WriteLine();

        Console.WriteLine("MimeFormats.LineWrapping | MimeFormats.AvoidSpace:");
        Console.WriteLine(mimeType.ToString(MimeFormats.LineWrapping | MimeFormats.AvoidSpace));
        Console.WriteLine();

        Console.WriteLine("MimeFormats.Url:");
        Console.WriteLine(mimeType.ToString(MimeFormats.Url));
        Console.WriteLine();
    }
}

/*
Console Output:

MimeFormats.Default:
application/x-stuff; short=s; key-long="Very very loooong value in order to show the line wrapping"

MimeFormats.IgnoreParameters:
application/x-stuff

MimeFormats.AvoidSpace:
application/x-stuff;short=s;key-long="Very very loooong value in order to show the line wrapping"

MimeFormats.LineWrapping:
application/x-stuff; short=s;
key-long*0="Very very loooong value in order to show the line ";
key-long*1="wrapping"

MimeFormats.LineWrapping | MimeFormats.AvoidSpace:
application/x-stuff;short=s;
key-long*0="Very very loooong value in order to show the line ";
key-long*1="wrapping"

MimeFormats.Url:
application/x-stuff;short=s;key-long*=utf-8''Very%20very%20loooong%20value%20in%20order%20to%20show%20the%20line%20wrapping
*/</code></pre></div></div><p>
            Comparison of <a href="cf45aa02-2c31-6523-699f-9af592bef575.htm">MimeType</a> instances:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using FolkerKinzel.MimeTypes;

namespace Examples;

public static class EqualityExample
{
    public static void Example()
    {
        const string media1 = "text/plain; charset=us-ascii";
        const string media2 = "TEXT/PLAIN";
        const string media3 = "TEXT/HTML";
        const string media4 = "text/plain; charset=iso-8859-1";
        const string media5 = "TEXT/PLAIN; CHARSET=ISO-8859-1";
        const string media6 = "text/plain; charset=iso-8859-1; other-parameter=other_value";
        const string media7 = "text/plain; OTHER-PARAMETER=other_value; charset=ISO-8859-1";
        const string media8 = "text/plain; charset=iso-8859-1; other-parameter=OTHER_VALUE";

        if (MimeType.Parse(media1) == MimeType.Parse(media2) &amp;&amp;
            MimeType.Parse(media2) != MimeType.Parse(media3) &amp;&amp;
            MimeType.Parse(media2) != MimeType.Parse(media4) &amp;&amp;
            MimeType.Parse(media2).Equals(MimeType.Parse(media4), ignoreParameters: true) &amp;&amp;
            MimeType.Parse(media4) == MimeType.Parse(media5) &amp;&amp;
            MimeType.Parse(media4) != MimeType.Parse(media6) &amp;&amp;
            MimeType.Parse(media6) == MimeType.Parse(media7) &amp;&amp;
            MimeType.Parse(media6) != MimeType.Parse(media8))
        {
            Console.WriteLine("Success");
        }
        else
        {
            Console.WriteLine("Error");
        }
    }
}
// Console Output: Success</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDIFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="241ee3dd-070d-815b-9741-f99abce60e68.htm">IsAccessTypeParameter</a></td><td>
            Indicates whether the <a href="10b0624c-9e34-be3a-c969-2c6747d693dd.htm">MimeTypeParameterInfo</a> has the <a href="191b43cd-d203-cbd6-da09-aa68291f91d5.htm">Key</a> "access-type".
            The comparison is case-insensitive.
            </td></tr><tr><td><a href="09162ed3-3dfb-093d-1faa-4c5ab535e9d1.htm">IsAsciiCharSetParameter</a></td><td>
            Indicates whether this instance equals "charset=us-ascii". The comparison is case-insensitive.
            </td></tr><tr><td><a href="760e8fd9-5165-72b1-4083-d612bf9a0268.htm">IsCharSetParameter</a></td><td>
            Indicates whether the <a href="10b0624c-9e34-be3a-c969-2c6747d693dd.htm">MimeTypeParameterInfo</a> has the <a href="191b43cd-d203-cbd6-da09-aa68291f91d5.htm">Key</a> "charset". 
            The comparison is case-insensitive.
            </td></tr><tr><td><a href="ee4975d0-e7cf-7ad9-4c62-96148a0a5c1b.htm">IsValueCaseSensitive</a></td><td>
            Indicates whether the <a href="672368ba-d50d-3eef-8d23-0009453d3ed8.htm">Value</a> should be treated case sensitive.
            </td></tr><tr><td><a href="191b43cd-d203-cbd6-da09-aa68291f91d5.htm">Key</a></td><td>
            Gets the name of the parameter.
            </td></tr><tr><td><a href="89f14ff2-6679-cedd-f010-0511c454b40b.htm">Language</a></td><td>
            Gets an IETF-Language tag that indicates the language of the parameter's value.
            </td></tr><tr><td><a href="672368ba-d50d-3eef-8d23-0009453d3ed8.htm">Value</a></td><td>
            Gets the value of the parameter.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDAFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="0a9fc5e4-49e3-58eb-e832-b97bf6430666.htm">AppendTo</a></td><td>
            Appends a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> representation of this instance according to RFC 2045 and RFC 2231
            to a <a href="https://learn.microsoft.com/dotnet/api/system.text.stringbuilder" target="_blank" rel="noopener noreferrer">StringBuilder</a>.
            </td></tr><tr><td><a href="a78d85ef-f420-7069-5df1-ca42400e6ea3.htm">CompareTo</a></td><td>
            Compares the current instance with another <span class="selflink">MimeTypeParameter</span> and returns 
            an <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a> that indicates whether the current instance precedes, follows, or 
            occurs in the same position in the sort order as the other <span class="selflink">MimeTypeParameter</span>.
            </td></tr><tr><td><a href="59f34f0f-3800-6a47-cf99-4bdce1e1f7b1.htm">Equals(MimeTypeParameter)</a></td><td>
            Determines if the content of <span class="parameter">other</span> is equal to that of the 
            current instance.
            </td></tr><tr><td><a href="c025140c-36e1-2dc3-d97a-7d87785893a6.htm">Equals(Object)</a></td><td>
            Determines whether <span class="parameter">obj</span> is a <span class="selflink">MimeTypeParameter</span> object
            whose content is equal to that of the current instance.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Object<span id="LST2FEE8ADF_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><a href="cce4e88a-cf5b-84d5-edad-045269322032.htm">GetHashCode</a></td><td>
            Computes a hash code for the instance.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">Object<span id="LST2FEE8ADF_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LST2FEE8ADF_6" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="2592bfe7-1b33-b689-aedc-79653a10ddce.htm">ToString<span id="LST2FEE8ADF_7" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Creates a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> representation of the instance.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noopener noreferrer">Object<span id="LST2FEE8ADF_8" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST2FEE8ADF_9" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="a0b1b9cc-1d7d-1660-c24f-157d75233aa9.htm">ToString(Boolean)</a></td><td>
            Creates a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> representation of the instance.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDEFASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="71e09c66-3ec8-5d98-4e33-3fcac49e5022.htm">Equality(MimeTypeParameter, MimeTypeParameter)</a></td><td>
            Returns a value that indicates whether two specified <span class="selflink">MimeTypeParameter</span> instances are 
            equal.
            </td></tr><tr><td><a href="8855f53f-375a-eb84-8813-d15a79d7fd6d.htm">Inequality(MimeTypeParameter, MimeTypeParameter)</a></td><td>
            Returns a value that indicates whether two specified <span class="selflink">MimeTypeParameter</span> instances are
            not equal.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="cd50c7a3-02f6-2e09-4e46-144944c88fc1.htm">FolkerKinzel.MimeTypes Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Operators</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2024 Folker Kinzel</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>