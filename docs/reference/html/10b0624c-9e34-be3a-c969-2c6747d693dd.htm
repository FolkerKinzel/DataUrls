<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MimeTypeParameterInfo Structure</title><meta name="Title" content="MimeTypeParameterInfo" /><meta name="Help.Id" content="T:FolkerKinzel.MimeTypes.MimeTypeParameterInfo" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="FolkerKinzel.MimeTypes" /><meta name="guid" content="10b0624c-9e34-be3a-c969-2c6747d693dd" /><meta name="Description" content="Provides the information stored in an Internet Media Type Parameter-." /><meta name="tocFile" content="../toc/IDC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">FolkerKinzel.DataUrls</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Mime<wbr />Type<wbr />Parameter<wbr />Info Structure</h1><div class="summary">
            Provides the information stored in an Internet Media Type Parameter-<a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="cd50c7a3-02f6-2e09-4e46-144944c88fc1.htm">FolkerKinzel.MimeTypes</a><br /><strong>Assembly:</strong> FolkerKinzel.MimeTypes (in FolkerKinzel.MimeTypes.dll) Version: 1.0.0+1a444a216a471c2f6ccc003677c21233190b0d23<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> <span class="identifier">MimeTypeParameterInfo</span> : <span class="identifier">ICloneable</span>, 
	<span class="identifier">IComparable</span>&lt;<span class="identifier">MimeTypeParameterInfo</span>&gt;, <span class="identifier">IEquatable</span>&lt;<span class="identifier">MimeTypeParameterInfo</span>&gt;</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Structure</span> <span class="identifier">MimeTypeParameterInfo</span>
	<span class="keyword">Implements</span> <span class="identifier">ICloneable</span>, <span class="identifier">IComparable</span>(<span class="keyword">Of</span> <span class="identifier">MimeTypeParameterInfo</span>), 
	<span class="identifier">IEquatable</span>(<span class="keyword">Of</span> <span class="identifier">MimeTypeParameterInfo</span>)</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">value class</span> <span class="identifier">MimeTypeParameterInfo</span> : <span class="identifier">ICloneable</span>, 
	<span class="identifier">IComparable</span>&lt;<span class="identifier">MimeTypeParameterInfo</span>&gt;, <span class="identifier">IEquatable</span>&lt;<span class="identifier">MimeTypeParameterInfo</span>&gt;</code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="fs"><div class="codeHeader"><span class="codeHeaderTitle">F#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-fs">[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">MimeTypeParameterInfo</span> = 
    <span class="keyword">struct</span>
        <span class="keyword">inherit</span> <span class="identifier">ValueType</span>
        <span class="keyword">interface</span> <span class="identifier">ICloneable</span>
        <span class="keyword">interface</span> <span class="identifier">IComparable</span>&lt;<span class="identifier">MimeTypeParameterInfo</span>&gt;
        <span class="keyword">interface</span> <span class="identifier">IEquatable</span>&lt;<span class="identifier">MimeTypeParameterInfo</span>&gt;
    <span class="keyword">end</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">MimeTypeParameterInfo</span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.icloneable" target="_blank" rel="noopener noreferrer">ICloneable</a>, <a href="https://learn.microsoft.com/dotnet/api/system.icomparable-1" target="_blank" rel="noopener noreferrer">IComparable</a><span id="LSTA7E3F019_0" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink">MimeTypeParameterInfo</span><span id="LSTA7E3F019_1" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, <a href="https://learn.microsoft.com/dotnet/api/system.iequatable-1" target="_blank" rel="noopener noreferrer">IEquatable</a><span id="LSTA7E3F019_2" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink">MimeTypeParameterInfo</span><span id="LSTA7E3F019_3" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDBCSection"><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Tip</p></div><div class="message-body"><p><span class="selflink">MimeTypeParameterInfo</span> is a quite large structure. Pass it to other methods by reference (in, ref or out parameters in C#)!
            </p><p>
            If you intend to hold a <span class="selflink">MimeTypeParameterInfo</span> for a long time in memory and if this <span class="selflink">MimeTypeParameterInfo</span> is parsed
            from a <a href="https://learn.microsoft.com/dotnet/api/system.readonlymemory-1" target="_blank" rel="noopener noreferrer">ReadOnlyMemory&lt;Char&gt;</a> that comes from a very long <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>, 
            keep in mind, that the <span class="selflink">MimeTypeParameterInfo</span> holds a reference to that <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>. Consider in this case to make
            a copy of the <a href="92dd4ad5-92fa-19fe-76a2-10387d0e336c.htm">MimeTypeInfo</a> structure with <a href="e6bb900f-738c-7dfb-23fc-959d8d58d9da.htm">Clone<span id="LSTA7E3F019_4" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>: The copy is built on a separate <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>,
            which is case-normalized and only as long as needed.
            </p></div></article></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDCCSection"><p>
            Efficient parsing of an Internet Media Type <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using FolkerKinzel.MimeTypes;

namespace Examples;

public static class MimeTypeInfoExample
{
    public static void Example()
    {
        const string input = """
        This is some text before the MIME type.
                             text/plain; charset=iso-8859-1; (This is a comment.)
        second-parameter*0*=utf-8'en'For%20demonstration%20purposes%20o;
        second-parameter*1*=nly%2C%20with%20a%20few%20non-ASCII%20chara;
        second-parameter*2*=cters%20%C3%A4%C3%B6%C3%BC

                        This is some Text after the MIME type.
        """;

        // MimeTypeInfo parses a specified part of a longer string
        // without having to allocate a substring.
        // White space characters before and after the MIME type are accepted.
        // The return values of the properties are portions of the input in form
        // of ReadOnlySpan&lt;char&gt; structs.

        MimeTypeInfo info = MimeTypeInfo.Parse(input.AsMemory(39, 275));

        Console.WriteLine("Media Type: {0}", info.MediaType.ToString());
        Console.WriteLine("Sub Type:   {0}", info.SubType.ToString());
        Console.WriteLine();
        Console.WriteLine("Is empty:        {0}", info.IsEmpty);
        Console.WriteLine("Is text:         {0}", info.IsText);
        Console.WriteLine("Is plain text:   {0}", info.IsTextPlain);
        Console.WriteLine("Is octet stream: {0}", info.IsOctetStream);

        Console.WriteLine("The file type extension for this MIME type is \"{0}\".",
                           info.GetFileTypeExtension());

        int parameterCounter = 1;
        foreach (MimeTypeParameterInfo parameter in info.Parameters())
        {
            Console.WriteLine();
            Console.WriteLine($"Parameter {parameterCounter++}:");
            Console.WriteLine("============");
            Console.WriteLine($"Key:       {parameter.Key}");
            Console.WriteLine($"Value:     {parameter.Value}");
            Console.WriteLine($"Language:  {parameter.Language}");
            Console.WriteLine($"Charset:   {parameter.CharSet}");
            Console.WriteLine("Is charset parameter:       {0}", parameter.IsCharSetParameter);
            Console.WriteLine("Is ASCII charset parameter: {0}", parameter.IsAsciiCharSetParameter);
            Console.WriteLine("Is access type parameter:   {0}", parameter.IsAccessTypeParameter);
            Console.WriteLine("Is value case sensitive:    {0}", parameter.IsValueCaseSensitive);
        }
        Console.WriteLine();

        // Compare MimeTypeInfo values using options:
        MimeTypeInfo info2 = MimeTypeInfo.Parse("TEXT/PLAIN; CHARSET=UTF-8");
        Console.WriteLine("Equal with parameters:      {0}", info.Equals(in info2));
        Console.WriteLine("Equal without parameters:   {0}", info.Equals(in info2, ignoreParameters: true));

        Console.WriteLine();
        Console.WriteLine("Default:           {0}", info2.ToString());
        Console.WriteLine("Ignore Parameters: {0}", info2.ToString(MimeFormats.IgnoreParameters));
    }
}
/*
Console output: 

Media Type: text
Sub Type:   plain

Is empty:        False
Is text:         True
Is plain text:   True
Is octet stream: False
The file type extension for this MIME type is ".txt".

Parameter 1:
============
Key:       charset
Value:     iso-8859-1
Language:
Charset:
Is charset parameter:       True
Is ASCII charset parameter: False
Is access type parameter:   False
Is value case sensitive:    False

Parameter 2:
============
Key:       second-parameter
Value:     For demonstration purposes only, with a few non-ASCII characters äöü
Language:  en
Charset:   utf-8
Is charset parameter:       False
Is ASCII charset parameter: False
Is access type parameter:   False
Is value case sensitive:    True

Equal with parameters:      False
Equal without parameters:   True

Default:           text/plain; charset=utf-8
Ignore Parameters: text/plain
 */</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDKFASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="f5936b6a-ae91-19f9-b3db-bef114d2adfa.htm">CharSet</a></td><td>
            Gets the character set in which <a href="9efa05ab-c63e-627b-b526-d50e15f8e1c4.htm">Value</a> is encoded.
            </td></tr><tr><td><a href="395e7c9e-7b5e-a9c0-8f11-54b9e42e17f8.htm">Empty</a></td><td>
            Gets an empty <span class="selflink">MimeTypeParameterInfo</span> structure.
            </td></tr><tr><td><a href="0e1fd24b-0564-12c1-e813-dcbfc52a4ee1.htm">IsAccessTypeParameter</a></td><td>
            Indicates whether the <span class="selflink">MimeTypeParameterInfo</span> has the <a href="494afcb3-be93-36f4-e057-2e71627a7137.htm">Key</a> "access-type". The comparison is case-insensitive.
            </td></tr><tr><td><a href="c029d141-1c36-228b-03da-7c4bc5e6532a.htm">IsAsciiCharSetParameter</a></td><td>
            Indicates whether this instance equals "charset=us-ascii". The comparison is case-insensitive.
            </td></tr><tr><td><a href="66d92467-3f88-539b-4455-698719c06a97.htm">IsCharSetParameter</a></td><td>
            Indicates whether the <span class="selflink">MimeTypeParameterInfo</span> has the <a href="494afcb3-be93-36f4-e057-2e71627a7137.htm">Key</a> "charset". The comparison is case-insensitive.
            </td></tr><tr><td><a href="10da2e25-f789-0234-6a7a-3cf406d80519.htm">IsEmpty</a></td><td>
            Indicates whether the instance contains no data.
            </td></tr><tr><td><a href="71717e6f-efa7-6811-b233-742237b45345.htm">IsValueCaseSensitive</a></td><td>
            Indicates whether the <a href="9efa05ab-c63e-627b-b526-d50e15f8e1c4.htm">Value</a> should be treated case sensitive.
            </td></tr><tr><td><a href="494afcb3-be93-36f4-e057-2e71627a7137.htm">Key</a></td><td>
             Gets the name of the parameter.
             </td></tr><tr><td><a href="925f4807-d126-2d12-84c9-317d7a0afd8b.htm">Language</a></td><td>
            Gets an IETF-Language tag that indicates the language of the parameter's value.
            </td></tr><tr><td><a href="9efa05ab-c63e-627b-b526-d50e15f8e1c4.htm">Value</a></td><td>
            Gets the value of the parameter.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDAFASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="45ba4d42-c435-d5ab-25c2-50e92d920017.htm">AppendTo</a></td><td>
            Appends a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> representation of this instance according to RFC 2045 and RFC 2231
            to a <a href="https://learn.microsoft.com/dotnet/api/system.text.stringbuilder" target="_blank" rel="noopener noreferrer">StringBuilder</a>.
            </td></tr><tr><td><a href="e6bb900f-738c-7dfb-23fc-959d8d58d9da.htm">Clone</a></td><td>
            Creates a new <span class="selflink">MimeTypeParameterInfo</span> that is a copy of the current instance.
            </td></tr><tr><td><a href="f393125c-63e3-234b-d3e1-df6887732c3c.htm">CompareTo</a></td><td>
            Compares the current instance with another <span class="selflink">MimeTypeParameterInfo</span> and returns an <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a> that indicates whether 
            the current instance precedes, follows, or occurs in the same position in the sort order as the other <span class="selflink">MimeTypeParameterInfo</span>.
            </td></tr><tr><td><a href="400dcba4-7b6b-eaae-1973-ebb44ede52cb.htm">Equals(MimeTypeParameterInfo)</a></td><td>
            Determines if the content of <span class="parameter">other</span> is equal to that of the 
            current instance.
            </td></tr><tr><td><a href="f6e3cbe7-0993-5b65-b465-4ab2263ec25e.htm">Equals(MimeTypeParameterInfo<span id="LSTA7E3F019_5" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Determines if the content of <span class="parameter">other</span> is equal to that of the 
            current instance.
            </td></tr><tr><td><a href="1ee5cf4e-f7cf-b626-96c2-ba08060e681e.htm">Equals(Object)</a></td><td>
            Determines whether <span class="parameter">obj</span> is a <span class="selflink">MimeTypeParameterInfo</span> structure
            whose content is equal to that of the current instance.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals" target="_blank" rel="noopener noreferrer">ValueType<span id="LSTA7E3F019_6" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><a href="eabb34dd-7bc6-0db6-1d7d-49056a3baf8a.htm">GetHashCode</a></td><td>
            Computes a hash code for the instance.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode" target="_blank" rel="noopener noreferrer">ValueType<span id="LSTA7E3F019_7" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LSTA7E3F019_8" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="92e424ab-26c6-da61-64e0-1a5ef1682931.htm">ToString<span id="LSTA7E3F019_9" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Creates a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> representation of the instance.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring" target="_blank" rel="noopener noreferrer">ValueType<span id="LSTA7E3F019_10" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LSTA7E3F019_11" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="7cb3a850-ec88-c80d-ccd1-5ff2bdd4123d.htm">ToString(Boolean)</a></td><td>
            Creates a <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a> representation of the instance.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDFFASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="6cb3cbcd-cbd6-a599-5acd-f81bdbcbb7d8.htm">Equality(MimeTypeParameterInfo, MimeTypeParameterInfo)</a></td><td>
            Returns a value that indicates whether two specified <span class="selflink">MimeTypeParameterInfo</span> values are equal.
            </td></tr><tr><td><a href="d8b8adeb-3291-628b-bb9b-4b63ae7fb1d6.htm">Inequality(MimeTypeParameterInfo, MimeTypeParameterInfo)</a></td><td>
            Returns a value that indicates whether two specified <span class="selflink">MimeTypeParameterInfo</span> values are not equal.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Explicit Interface Implementations</h2><div id="IDHFASection"><table id="ExplicitInterfaceImplementationList" class="table is-hoverable"><tr><td><a href="0528a38b-74fa-b6bf-a583-55538c3f0176.htm">ICloneable<span id="LSTA7E3F019_12" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Clone</a></td><td>Creates a new object that is a copy of the current instance.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="cd50c7a3-02f6-2e09-4e46-144944c88fc1.htm">FolkerKinzel.MimeTypes Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Operators</a></li><li><a class="quickLink">Explicit Interface Implementations</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2024 Folker Kinzel</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>